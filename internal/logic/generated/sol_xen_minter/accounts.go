// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package sol_xen_minter

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
)

type UserSolXnRecord struct {
	Hashes      uint64
	Superhashes uint32
	Points      ag_binary.Uint128
}

var UserSolXnRecordDiscriminator = [8]byte{105, 200, 79, 162, 225, 52, 172, 238}

func (obj UserSolXnRecord) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(UserSolXnRecordDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Hashes` param:
	err = encoder.Encode(obj.Hashes)
	if err != nil {
		return err
	}
	// Serialize `Superhashes` param:
	err = encoder.Encode(obj.Superhashes)
	if err != nil {
		return err
	}
	// Serialize `Points` param:
	err = encoder.Encode(obj.Points)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UserSolXnRecord) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(UserSolXnRecordDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[105 200 79 162 225 52 172 238]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Hashes`:
	err = decoder.Decode(&obj.Hashes)
	if err != nil {
		return err
	}
	// Deserialize `Superhashes`:
	err = decoder.Decode(&obj.Superhashes)
	if err != nil {
		return err
	}
	// Deserialize `Points`:
	err = decoder.Decode(&obj.Points)
	if err != nil {
		return err
	}
	return nil
}

type UserTokensRecord struct {
	PointsCounters [4]ag_binary.Uint128
	TokensMinted   ag_binary.Uint128
}

var UserTokensRecordDiscriminator = [8]byte{113, 218, 188, 234, 62, 173, 78, 230}

func (obj UserTokensRecord) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(UserTokensRecordDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `PointsCounters` param:
	err = encoder.Encode(obj.PointsCounters)
	if err != nil {
		return err
	}
	// Serialize `TokensMinted` param:
	err = encoder.Encode(obj.TokensMinted)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UserTokensRecord) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(UserTokensRecordDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[113 218 188 234 62 173 78 230]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `PointsCounters`:
	err = decoder.Decode(&obj.PointsCounters)
	if err != nil {
		return err
	}
	// Deserialize `TokensMinted`:
	err = decoder.Decode(&obj.TokensMinted)
	if err != nil {
		return err
	}
	return nil
}
